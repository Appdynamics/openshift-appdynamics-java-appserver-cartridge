#!/bin/bash -eu

source $OPENSHIFT_CARTRIDGE_SDK_BASH

function status {
  client_result "AppDynamics JBOSS cartridge is enabled."
}


# control start is called when the cartridge is added by add-cartridge as well as when code is pushed to git.
# It is creating hooks in the application's .openshift directory that gets executed when the primary cartridge starts/restarts/reloads
function start {

	#Detecting primary cartridge
	PRIMARY_CART=$(ruby_sdk "primary_cartridge_manifest['Name']")
	client_message "The primary cartridge name is: ${PRIMARY_CART}"

	case "$PRIMARY_CART" in 
	  jbossas) 
	    client_message "Valid primary cartridge detected - jbossas."
	    ;;
	  jbosseap)
	    client_message "Valid primary cartridge detected - jbosseap."
	    ;;
	  jbossews)
	    client_message "Valid primary cartridge detected - jbossews."
	    ;;
	  *)
	    # Invalid cartridge type
	    client_error "Invalid primary cartridge: ${PRIMARY_CART}. Valid ones: jbossas,jbosseap,jbossews"
	    exit 109 
	    ;;
	esac

	# Using the hooks for primary cartridge to insert the javaagent options for AppD 
	HOOKS="${OPENSHIFT_REPO_DIR}.openshift/action_hooks/pre_start_${PRIMARY_CART}
	${OPENSHIFT_REPO_DIR}.openshift/action_hooks/pre_restart_${PRIMARY_CART}
	${OPENSHIFT_REPO_DIR}.openshift/action_hooks/pre_reload_${PRIMARY_CART}"


	for hook in $HOOKS; do
	  client_message "Processing $hook"

	  if [ ! -e "$hook" ]; then
	    echo '#!/bin/bash' >> $hook
	    chmod 700 $hook
	  fi

	  if [ -w "$hook" ]; then
	    echo -e "source \${OPENSHIFT_APPD_JAVA_DIR}conf/javaagent_${PRIMARY_CART}.conf" >> $hook
	  else
	    client_message "WARNING: The file $hook is not writable."
	  fi
	done


	client_message "AppDynamics JBOSS cartridge is started."
}




case "$1" in
  start)
    start
    ;;
  status)               
    status 
    ;;
  *)        
    exit 0
esac

exit 0
